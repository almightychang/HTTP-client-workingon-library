ARM GAS  /tmp/cc0K1jp7.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f7xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB141:
  28              		.file 1 "Core/Src/stm32f7xx_it.c"
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32f7xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32f7xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32f7xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32f7xx_it.c ****   *
  17:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f7xx_it.c ****   */
  19:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f7xx_it.c **** 
  21:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f7xx_it.c **** #include "main.h"
  23:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  24:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f7xx_it.c **** #include <stdbool.h>
  27:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
  28:Core/Src/stm32f7xx_it.c **** 
  29:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/cc0K1jp7.s 			page 2


  31:Core/Src/stm32f7xx_it.c **** 
  32:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  33:Core/Src/stm32f7xx_it.c **** 
  34:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  36:Core/Src/stm32f7xx_it.c **** 
  37:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  38:Core/Src/stm32f7xx_it.c **** 
  39:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  41:Core/Src/stm32f7xx_it.c **** 
  42:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  43:Core/Src/stm32f7xx_it.c **** 
  44:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  46:Core/Src/stm32f7xx_it.c **** bool timeFlag = false;
  47:Core/Src/stm32f7xx_it.c **** uint32_t timeCounter = 0;
  48:Core/Src/stm32f7xx_it.c **** 
  49:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  50:Core/Src/stm32f7xx_it.c **** 
  51:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/stm32f7xx_it.c **** 
  54:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  55:Core/Src/stm32f7xx_it.c **** 
  56:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/stm32f7xx_it.c **** 
  59:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  60:Core/Src/stm32f7xx_it.c **** 
  61:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  62:Core/Src/stm32f7xx_it.c **** 
  63:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32f7xx_it.c **** 
  65:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32f7xx_it.c **** 
  67:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32f7xx_it.c **** /**
  71:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32f7xx_it.c ****   */
  73:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32f7xx_it.c **** {
  29              		.loc 1 74 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  75:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f7xx_it.c **** 
  77:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f7xx_it.c ****   while (1)
  36              		.loc 1 79 3 discriminator 1 view .LVU1
ARM GAS  /tmp/cc0K1jp7.s 			page 3


  80:Core/Src/stm32f7xx_it.c ****   {
  81:Core/Src/stm32f7xx_it.c ****   }
  37              		.loc 1 81 3 discriminator 1 view .LVU2
  79:Core/Src/stm32f7xx_it.c ****   {
  38              		.loc 1 79 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE141:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB142:
  82:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32f7xx_it.c **** }
  84:Core/Src/stm32f7xx_it.c **** 
  85:Core/Src/stm32f7xx_it.c **** /**
  86:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32f7xx_it.c ****   */
  88:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32f7xx_it.c **** {
  52              		.loc 1 89 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  90:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32f7xx_it.c **** 
  92:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32f7xx_it.c ****   while (1)
  59              		.loc 1 93 3 discriminator 1 view .LVU5
  94:Core/Src/stm32f7xx_it.c ****   {
  95:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f7xx_it.c ****   }
  60              		.loc 1 97 3 discriminator 1 view .LVU6
  93:Core/Src/stm32f7xx_it.c ****   {
  61              		.loc 1 93 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE142:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB143:
  98:Core/Src/stm32f7xx_it.c **** }
  99:Core/Src/stm32f7xx_it.c **** 
 100:Core/Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/cc0K1jp7.s 			page 4


 101:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 102:Core/Src/stm32f7xx_it.c ****   */
 103:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32f7xx_it.c **** {
  75              		.loc 1 104 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 105:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32f7xx_it.c **** 
 107:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f7xx_it.c ****   while (1)
  82              		.loc 1 108 3 discriminator 1 view .LVU9
 109:Core/Src/stm32f7xx_it.c ****   {
 110:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f7xx_it.c ****   }
  83              		.loc 1 112 3 discriminator 1 view .LVU10
 108:Core/Src/stm32f7xx_it.c ****   {
  84              		.loc 1 108 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE143:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB144:
 113:Core/Src/stm32f7xx_it.c **** }
 114:Core/Src/stm32f7xx_it.c **** 
 115:Core/Src/stm32f7xx_it.c **** /**
 116:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 117:Core/Src/stm32f7xx_it.c ****   */
 118:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32f7xx_it.c **** {
  98              		.loc 1 119 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 120:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32f7xx_it.c **** 
 122:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32f7xx_it.c ****   while (1)
 105              		.loc 1 123 3 discriminator 1 view .LVU13
 124:Core/Src/stm32f7xx_it.c ****   {
 125:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f7xx_it.c ****   }
ARM GAS  /tmp/cc0K1jp7.s 			page 5


 106              		.loc 1 127 3 discriminator 1 view .LVU14
 123:Core/Src/stm32f7xx_it.c ****   {
 107              		.loc 1 123 9 discriminator 1 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE144:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB145:
 128:Core/Src/stm32f7xx_it.c **** }
 129:Core/Src/stm32f7xx_it.c **** 
 130:Core/Src/stm32f7xx_it.c **** /**
 131:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32f7xx_it.c ****   */
 133:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32f7xx_it.c **** {
 121              		.loc 1 134 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 135:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32f7xx_it.c **** 
 137:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32f7xx_it.c ****   while (1)
 128              		.loc 1 138 3 discriminator 1 view .LVU17
 139:Core/Src/stm32f7xx_it.c ****   {
 140:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f7xx_it.c ****   }
 129              		.loc 1 142 3 discriminator 1 view .LVU18
 138:Core/Src/stm32f7xx_it.c ****   {
 130              		.loc 1 138 9 discriminator 1 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE145:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	SVC_Handler:
 143              	.LFB146:
 143:Core/Src/stm32f7xx_it.c **** }
 144:Core/Src/stm32f7xx_it.c **** 
 145:Core/Src/stm32f7xx_it.c **** /**
 146:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 147:Core/Src/stm32f7xx_it.c ****   */
 148:Core/Src/stm32f7xx_it.c **** void SVC_Handler(void)
ARM GAS  /tmp/cc0K1jp7.s 			page 6


 149:Core/Src/stm32f7xx_it.c **** {
 144              		.loc 1 149 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 150:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 151:Core/Src/stm32f7xx_it.c **** 
 152:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 153:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 154:Core/Src/stm32f7xx_it.c **** 
 155:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 156:Core/Src/stm32f7xx_it.c **** }
 149              		.loc 1 156 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE146:
 154              		.section	.text.DebugMon_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	DebugMon_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	DebugMon_Handler:
 162              	.LFB147:
 157:Core/Src/stm32f7xx_it.c **** 
 158:Core/Src/stm32f7xx_it.c **** /**
 159:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 160:Core/Src/stm32f7xx_it.c ****   */
 161:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 162:Core/Src/stm32f7xx_it.c **** {
 163              		.loc 1 162 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 163:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 164:Core/Src/stm32f7xx_it.c **** 
 165:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 166:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 167:Core/Src/stm32f7xx_it.c **** 
 168:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 169:Core/Src/stm32f7xx_it.c **** }
 168              		.loc 1 169 1 view .LVU23
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE147:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	PendSV_Handler:
 181              	.LFB148:
 170:Core/Src/stm32f7xx_it.c **** 
 171:Core/Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/cc0K1jp7.s 			page 7


 172:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pendable request for system service.
 173:Core/Src/stm32f7xx_it.c ****   */
 174:Core/Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 175:Core/Src/stm32f7xx_it.c **** {
 182              		.loc 1 175 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 176:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 177:Core/Src/stm32f7xx_it.c **** 
 178:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 179:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 180:Core/Src/stm32f7xx_it.c **** 
 181:Core/Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 182:Core/Src/stm32f7xx_it.c **** }
 187              		.loc 1 182 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE148:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	SysTick_Handler:
 200              	.LFB149:
 183:Core/Src/stm32f7xx_it.c **** 
 184:Core/Src/stm32f7xx_it.c **** /**
 185:Core/Src/stm32f7xx_it.c ****   * @brief This function handles System tick timer.
 186:Core/Src/stm32f7xx_it.c ****   */
 187:Core/Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 188:Core/Src/stm32f7xx_it.c **** {
 201              		.loc 1 188 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI0:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 189:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 190:Core/Src/stm32f7xx_it.c **** 
 191:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 192:Core/Src/stm32f7xx_it.c ****   HAL_IncTick();
 210              		.loc 1 192 3 view .LVU27
 211 0002 FFF7FEFF 		bl	HAL_IncTick
 212              	.LVL0:
 193:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 194:Core/Src/stm32f7xx_it.c **** 
 195:Core/Src/stm32f7xx_it.c ****   timeCounter++;
 213              		.loc 1 195 3 view .LVU28
 214              		.loc 1 195 14 is_stmt 0 view .LVU29
 215 0006 074A     		ldr	r2, .L17
 216 0008 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc0K1jp7.s 			page 8


 217 000a 0133     		adds	r3, r3, #1
 218 000c 1360     		str	r3, [r2]
 196:Core/Src/stm32f7xx_it.c **** 
 197:Core/Src/stm32f7xx_it.c ****   if(timeCounter > 5000)
 219              		.loc 1 197 3 is_stmt 1 view .LVU30
 220              		.loc 1 197 5 is_stmt 0 view .LVU31
 221 000e 41F28832 		movw	r2, #5000
 222 0012 9342     		cmp	r3, r2
 223 0014 05D9     		bls	.L14
 198:Core/Src/stm32f7xx_it.c ****   {
 199:Core/Src/stm32f7xx_it.c ****     timeFlag = true;
 224              		.loc 1 199 5 is_stmt 1 view .LVU32
 225              		.loc 1 199 14 is_stmt 0 view .LVU33
 226 0016 044B     		ldr	r3, .L17+4
 227 0018 0122     		movs	r2, #1
 228 001a 1A70     		strb	r2, [r3]
 200:Core/Src/stm32f7xx_it.c ****     timeCounter = 0;
 229              		.loc 1 200 5 is_stmt 1 view .LVU34
 230              		.loc 1 200 17 is_stmt 0 view .LVU35
 231 001c 014B     		ldr	r3, .L17
 232 001e 0022     		movs	r2, #0
 233 0020 1A60     		str	r2, [r3]
 234              	.L14:
 201:Core/Src/stm32f7xx_it.c ****   }
 202:Core/Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 203:Core/Src/stm32f7xx_it.c **** }
 235              		.loc 1 203 1 view .LVU36
 236 0022 08BD     		pop	{r3, pc}
 237              	.L18:
 238              		.align	2
 239              	.L17:
 240 0024 00000000 		.word	.LANCHOR0
 241 0028 00000000 		.word	.LANCHOR1
 242              		.cfi_endproc
 243              	.LFE149:
 245              		.global	timeCounter
 246              		.global	timeFlag
 247              		.section	.bss.timeCounter,"aw",%nobits
 248              		.align	2
 249              		.set	.LANCHOR0,. + 0
 252              	timeCounter:
 253 0000 00000000 		.space	4
 254              		.section	.bss.timeFlag,"aw",%nobits
 255              		.set	.LANCHOR1,. + 0
 258              	timeFlag:
 259 0000 00       		.space	1
 260              		.text
 261              	.Letext0:
 262              		.file 2 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 263              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 264              		.file 4 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cc0K1jp7.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/cc0K1jp7.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cc0K1jp7.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cc0K1jp7.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cc0K1jp7.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:96     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cc0K1jp7.s:113    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cc0K1jp7.s:136    .text.SVC_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:142    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cc0K1jp7.s:155    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cc0K1jp7.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:180    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cc0K1jp7.s:193    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cc0K1jp7.s:199    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cc0K1jp7.s:240    .text.SysTick_Handler:0000000000000024 $d
     /tmp/cc0K1jp7.s:252    .bss.timeCounter:0000000000000000 timeCounter
     /tmp/cc0K1jp7.s:258    .bss.timeFlag:0000000000000000 timeFlag
     /tmp/cc0K1jp7.s:248    .bss.timeCounter:0000000000000000 $d
     /tmp/cc0K1jp7.s:259    .bss.timeFlag:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
